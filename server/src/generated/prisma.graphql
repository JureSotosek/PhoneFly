# source: https://phonefly-296dd10a7e.herokuapp.com/phonefly/prod
# timestamp: Sun Feb 17 2019 20:52:53 GMT+0100 (Central European Standard Time)

type AggregateChallenge {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Challenge implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  score: Int!
  challengeSender: Player!
  challengeReceiver: Player!
  answered: Boolean!
}

"""A connection to a list of items."""
type ChallengeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChallengeEdge]!
  aggregate: AggregateChallenge!
}

input ChallengeCreateInput {
  score: Int!
  answered: Boolean!
  challengeSender: PlayerCreateOneWithoutSentChallengesInput!
  challengeReceiver: PlayerCreateOneWithoutPendingChallengesInput!
}

input ChallengeCreateManyWithoutChallengeReceiverInput {
  create: [ChallengeCreateWithoutChallengeReceiverInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutChallengeSenderInput {
  create: [ChallengeCreateWithoutChallengeSenderInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateWithoutChallengeReceiverInput {
  score: Int!
  answered: Boolean!
  challengeSender: PlayerCreateOneWithoutSentChallengesInput!
}

input ChallengeCreateWithoutChallengeSenderInput {
  score: Int!
  answered: Boolean!
  challengeReceiver: PlayerCreateOneWithoutPendingChallengesInput!
}

"""An edge in a connection."""
type ChallengeEdge {
  """The item at the end of the edge."""
  node: Challenge!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChallengeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  score_ASC
  score_DESC
  answered_ASC
  answered_DESC
}

type ChallengePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  score: Int!
  answered: Boolean!
}

input ChallengeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  score: Int

  """All values that are not equal to given value."""
  score_not: Int

  """All values that are contained in given list."""
  score_in: [Int!]

  """All values that are not contained in given list."""
  score_not_in: [Int!]

  """All values less than the given value."""
  score_lt: Int

  """All values less than or equal the given value."""
  score_lte: Int

  """All values greater than the given value."""
  score_gt: Int

  """All values greater than or equal the given value."""
  score_gte: Int
  answered: Boolean

  """All values that are not equal to given value."""
  answered_not: Boolean
}

type ChallengeSubscriptionPayload {
  mutation: MutationType!
  node: Challenge
  updatedFields: [String!]
  previousValues: ChallengePreviousValues
}

input ChallengeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChallengeWhereInput
}

input ChallengeUpdateInput {
  score: Int
  answered: Boolean
  challengeSender: PlayerUpdateOneRequiredWithoutSentChallengesInput
  challengeReceiver: PlayerUpdateOneRequiredWithoutPendingChallengesInput
}

input ChallengeUpdateManyDataInput {
  score: Int
  answered: Boolean
}

input ChallengeUpdateManyMutationInput {
  score: Int
  answered: Boolean
}

input ChallengeUpdateManyWithoutChallengeReceiverInput {
  create: [ChallengeCreateWithoutChallengeReceiverInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutChallengeReceiverInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutChallengeReceiverInput!]
}

input ChallengeUpdateManyWithoutChallengeSenderInput {
  create: [ChallengeCreateWithoutChallengeSenderInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutChallengeSenderInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutChallengeSenderInput!]
}

input ChallengeUpdateManyWithWhereNestedInput {
  where: ChallengeScalarWhereInput!
  data: ChallengeUpdateManyDataInput!
}

input ChallengeUpdateWithoutChallengeReceiverDataInput {
  score: Int
  answered: Boolean
  challengeSender: PlayerUpdateOneRequiredWithoutSentChallengesInput
}

input ChallengeUpdateWithoutChallengeSenderDataInput {
  score: Int
  answered: Boolean
  challengeReceiver: PlayerUpdateOneRequiredWithoutPendingChallengesInput
}

input ChallengeUpdateWithWhereUniqueWithoutChallengeReceiverInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutChallengeReceiverDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutChallengeSenderInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutChallengeSenderDataInput!
}

input ChallengeUpsertWithWhereUniqueWithoutChallengeReceiverInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutChallengeReceiverDataInput!
  create: ChallengeCreateWithoutChallengeReceiverInput!
}

input ChallengeUpsertWithWhereUniqueWithoutChallengeSenderInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutChallengeSenderDataInput!
  create: ChallengeCreateWithoutChallengeSenderInput!
}

input ChallengeWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  score: Int

  """All values that are not equal to given value."""
  score_not: Int

  """All values that are contained in given list."""
  score_in: [Int!]

  """All values that are not contained in given list."""
  score_not_in: [Int!]

  """All values less than the given value."""
  score_lt: Int

  """All values less than or equal the given value."""
  score_lte: Int

  """All values greater than the given value."""
  score_gt: Int

  """All values greater than or equal the given value."""
  score_gte: Int
  answered: Boolean

  """All values that are not equal to given value."""
  answered_not: Boolean
  challengeSender: PlayerWhereInput
  challengeReceiver: PlayerWhereInput
}

input ChallengeWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPlayer(data: PlayerCreateInput!): Player!
  createChallenge(data: ChallengeCreateInput!): Challenge!
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateChallenge(data: ChallengeUpdateInput!, where: ChallengeWhereUniqueInput!): Challenge
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteChallenge(where: ChallengeWhereUniqueInput!): Challenge
  upsertPlayer(where: PlayerWhereUniqueInput!, create: PlayerCreateInput!, update: PlayerUpdateInput!): Player!
  upsertChallenge(where: ChallengeWhereUniqueInput!, create: ChallengeCreateInput!, update: ChallengeUpdateInput!): Challenge!
  updateManyPlayers(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  updateManyChallenges(data: ChallengeUpdateManyMutationInput!, where: ChallengeWhereInput): BatchPayload!
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  deleteManyChallenges(where: ChallengeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Player implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  FacebookID: String!
  highScore: Float
  sentChallenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  pendingChallenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
}

"""A connection to a list of items."""
type PlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreateInput {
  FacebookID: String!
  highScore: Float
  sentChallenges: ChallengeCreateManyWithoutChallengeSenderInput
  pendingChallenges: ChallengeCreateManyWithoutChallengeReceiverInput
}

input PlayerCreateOneWithoutPendingChallengesInput {
  create: PlayerCreateWithoutPendingChallengesInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateOneWithoutSentChallengesInput {
  create: PlayerCreateWithoutSentChallengesInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateWithoutPendingChallengesInput {
  FacebookID: String!
  highScore: Float
  sentChallenges: ChallengeCreateManyWithoutChallengeSenderInput
}

input PlayerCreateWithoutSentChallengesInput {
  FacebookID: String!
  highScore: Float
  pendingChallenges: ChallengeCreateManyWithoutChallengeReceiverInput
}

"""An edge in a connection."""
type PlayerEdge {
  """The item at the end of the edge."""
  node: Player!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlayerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  FacebookID_ASC
  FacebookID_DESC
  highScore_ASC
  highScore_DESC
}

type PlayerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  FacebookID: String!
  highScore: Float
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
}

input PlayerUpdateInput {
  FacebookID: String
  highScore: Float
  sentChallenges: ChallengeUpdateManyWithoutChallengeSenderInput
  pendingChallenges: ChallengeUpdateManyWithoutChallengeReceiverInput
}

input PlayerUpdateManyMutationInput {
  FacebookID: String
  highScore: Float
}

input PlayerUpdateOneRequiredWithoutPendingChallengesInput {
  create: PlayerCreateWithoutPendingChallengesInput
  connect: PlayerWhereUniqueInput
  update: PlayerUpdateWithoutPendingChallengesDataInput
  upsert: PlayerUpsertWithoutPendingChallengesInput
}

input PlayerUpdateOneRequiredWithoutSentChallengesInput {
  create: PlayerCreateWithoutSentChallengesInput
  connect: PlayerWhereUniqueInput
  update: PlayerUpdateWithoutSentChallengesDataInput
  upsert: PlayerUpsertWithoutSentChallengesInput
}

input PlayerUpdateWithoutPendingChallengesDataInput {
  FacebookID: String
  highScore: Float
  sentChallenges: ChallengeUpdateManyWithoutChallengeSenderInput
}

input PlayerUpdateWithoutSentChallengesDataInput {
  FacebookID: String
  highScore: Float
  pendingChallenges: ChallengeUpdateManyWithoutChallengeReceiverInput
}

input PlayerUpsertWithoutPendingChallengesInput {
  update: PlayerUpdateWithoutPendingChallengesDataInput!
  create: PlayerCreateWithoutPendingChallengesInput!
}

input PlayerUpsertWithoutSentChallengesInput {
  update: PlayerUpdateWithoutSentChallengesDataInput!
  create: PlayerCreateWithoutSentChallengesInput!
}

input PlayerWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayerWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  FacebookID: String

  """All values that are not equal to given value."""
  FacebookID_not: String

  """All values that are contained in given list."""
  FacebookID_in: [String!]

  """All values that are not contained in given list."""
  FacebookID_not_in: [String!]

  """All values less than the given value."""
  FacebookID_lt: String

  """All values less than or equal the given value."""
  FacebookID_lte: String

  """All values greater than the given value."""
  FacebookID_gt: String

  """All values greater than or equal the given value."""
  FacebookID_gte: String

  """All values containing the given string."""
  FacebookID_contains: String

  """All values not containing the given string."""
  FacebookID_not_contains: String

  """All values starting with the given string."""
  FacebookID_starts_with: String

  """All values not starting with the given string."""
  FacebookID_not_starts_with: String

  """All values ending with the given string."""
  FacebookID_ends_with: String

  """All values not ending with the given string."""
  FacebookID_not_ends_with: String
  highScore: Float

  """All values that are not equal to given value."""
  highScore_not: Float

  """All values that are contained in given list."""
  highScore_in: [Float!]

  """All values that are not contained in given list."""
  highScore_not_in: [Float!]

  """All values less than the given value."""
  highScore_lt: Float

  """All values less than or equal the given value."""
  highScore_lte: Float

  """All values greater than the given value."""
  highScore_gt: Float

  """All values greater than or equal the given value."""
  highScore_gte: Float
  sentChallenges_every: ChallengeWhereInput
  sentChallenges_some: ChallengeWhereInput
  sentChallenges_none: ChallengeWhereInput
  pendingChallenges_every: ChallengeWhereInput
  pendingChallenges_some: ChallengeWhereInput
  pendingChallenges_none: ChallengeWhereInput
}

input PlayerWhereUniqueInput {
  id: ID
  FacebookID: String
}

type Query {
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge]!
  player(where: PlayerWhereUniqueInput!): Player
  challenge(where: ChallengeWhereUniqueInput!): Challenge
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!
  challengesConnection(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
  challenge(where: ChallengeSubscriptionWhereInput): ChallengeSubscriptionPayload
}
